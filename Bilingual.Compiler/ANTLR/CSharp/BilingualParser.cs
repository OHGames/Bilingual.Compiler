//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BilingualParser.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class BilingualParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CurlyOpen=1, CurlyClosed=2, SquareOpen=3, SquareClosed=4, ParenOpen=5, 
		ParenClosed=6, Semicolon=7, Colon=8, Equal=9, NotEqual=10, Bang=11, EqualTo=12, 
		PlusEqual=13, MinusEqual=14, MulEqual=15, DivEqual=16, Mod=17, Pow=18, 
		Mul=19, Div=20, Add=21, Sub=22, GreaterThan=23, LessThan=24, GreaterThanEqual=25, 
		LessThanEqual=26, Dot=27, Comma=28, Hash=29, True=30, False=31, If=32, 
		ElseIf=33, Else=34, While=35, Do=36, For=37, Foreach=38, Continue=39, 
		Break=40, Return=41, Await=42, Var=43, Global=44, In=45, Choose=46, MemberName=47, 
		Number=48, LineId=49, LineIdComment=50, DoubleQuote=51, WS=52, Comment=53, 
		String=54;
	public const int
		RULE_file = 0, RULE_container = 1, RULE_script = 2, RULE_scriptAttributes = 3, 
		RULE_expression = 4, RULE_literal = 5, RULE_block = 6, RULE_statement = 7, 
		RULE_variableDeclaration = 8, RULE_memberAssignment = 9, RULE_member = 10, 
		RULE_ifStatement = 11, RULE_ifElseStatement = 12, RULE_elseStatement = 13, 
		RULE_whileStatement = 14, RULE_doWhileStatement = 15, RULE_forStatement = 16, 
		RULE_forEachStatement = 17, RULE_dialogueStatement = 18, RULE_dialogueEmotion = 19, 
		RULE_chooseStatement = 20, RULE_chooseBlock = 21, RULE_functionCall = 22, 
		RULE_param = 23, RULE_arrayIndexer = 24, RULE_arrayObject = 25, RULE_accessor = 26, 
		RULE_arrayAccess = 27, RULE_unaryIncrementLeft = 28, RULE_unaryIncrementRight = 29, 
		RULE_unaryDecrementLeft = 30, RULE_unaryDecrementRight = 31, RULE_plusMinusMulDivEqual = 32, 
		RULE_incrementsAndDecrements = 33;
	public static readonly string[] ruleNames = {
		"file", "container", "script", "scriptAttributes", "expression", "literal", 
		"block", "statement", "variableDeclaration", "memberAssignment", "member", 
		"ifStatement", "ifElseStatement", "elseStatement", "whileStatement", "doWhileStatement", 
		"forStatement", "forEachStatement", "dialogueStatement", "dialogueEmotion", 
		"chooseStatement", "chooseBlock", "functionCall", "param", "arrayIndexer", 
		"arrayObject", "accessor", "arrayAccess", "unaryIncrementLeft", "unaryIncrementRight", 
		"unaryDecrementLeft", "unaryDecrementRight", "plusMinusMulDivEqual", "incrementsAndDecrements"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'['", "']'", "'('", "')'", "';'", "':'", "'='", "'!='", 
		"'!'", "'=='", "'+='", "'-='", "'*='", "'/='", "'%'", "'^'", "'*'", "'/'", 
		"'+'", "'-'", "'>'", "'<'", "'<='", "'>='", "'.'", "','", "'#'", "'true'", 
		"'false'", "'if'", "'else if'", "'else'", "'while'", "'do'", "'for'", 
		"'foreach'", "'continue'", "'break'", "'return'", "'await'", "'var'", 
		"'global'", "'in'", "'choose'", null, null, null, null, "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CurlyOpen", "CurlyClosed", "SquareOpen", "SquareClosed", "ParenOpen", 
		"ParenClosed", "Semicolon", "Colon", "Equal", "NotEqual", "Bang", "EqualTo", 
		"PlusEqual", "MinusEqual", "MulEqual", "DivEqual", "Mod", "Pow", "Mul", 
		"Div", "Add", "Sub", "GreaterThan", "LessThan", "GreaterThanEqual", "LessThanEqual", 
		"Dot", "Comma", "Hash", "True", "False", "If", "ElseIf", "Else", "While", 
		"Do", "For", "Foreach", "Continue", "Break", "Return", "Await", "Var", 
		"Global", "In", "Choose", "MemberName", "Number", "LineId", "LineIdComment", 
		"DoubleQuote", "WS", "Comment", "String"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BilingualParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BilingualParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BilingualParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BilingualParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ContainerContext[] container() {
			return GetRuleContexts<ContainerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContainerContext container(int i) {
			return GetRuleContext<ContainerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BilingualParser.Eof, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 68;
				container();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==MemberName );
			State = 74;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 73;
				Match(Eof);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContainerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MemberName() { return GetToken(BilingualParser.MemberName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CurlyOpen() { return GetToken(BilingualParser.CurlyOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CurlyClosed() { return GetToken(BilingualParser.CurlyClosed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScriptContext[] script() {
			return GetRuleContexts<ScriptContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptContext script(int i) {
			return GetRuleContext<ScriptContext>(i);
		}
		public ContainerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_container; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContainerContext container() {
		ContainerContext _localctx = new ContainerContext(Context, State);
		EnterRule(_localctx, 2, RULE_container);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			Match(MemberName);
			State = 77;
			Match(CurlyOpen);
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SquareOpen || _la==MemberName) {
				{
				{
				State = 78;
				script();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 84;
			Match(CurlyClosed);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MemberName() { return GetToken(BilingualParser.MemberName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(BilingualParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClosed() { return GetToken(BilingualParser.ParenClosed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptAttributesContext[] scriptAttributes() {
			return GetRuleContexts<ScriptAttributesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptAttributesContext scriptAttributes(int i) {
			return GetRuleContext<ScriptAttributesContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 4, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SquareOpen) {
				{
				{
				State = 86;
				scriptAttributes();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 92;
			Match(MemberName);
			State = 93;
			Match(ParenOpen);
			State = 94;
			Match(ParenClosed);
			State = 95;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptAttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SquareOpen() { return GetToken(BilingualParser.SquareOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MemberName() { return GetToken(BilingualParser.MemberName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(BilingualParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClosed() { return GetToken(BilingualParser.ParenClosed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SquareClosed() { return GetToken(BilingualParser.SquareClosed, 0); }
		public ScriptAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptAttributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScriptAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptAttributesContext scriptAttributes() {
		ScriptAttributesContext _localctx = new ScriptAttributesContext(Context, State);
		EnterRule(_localctx, 6, RULE_scriptAttributes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(SquareOpen);
			State = 98;
			Match(MemberName);
			State = 99;
			Match(ParenOpen);
			State = 100;
			expression(0);
			State = 101;
			Match(ParenClosed);
			State = 102;
			Match(SquareClosed);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddSubContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add() { return GetToken(BilingualParser.Add, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sub() { return GetToken(BilingualParser.Sub, 0); }
		public AddSubContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pow() { return GetToken(BilingualParser.Pow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PowExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BangExpressionContext : ExpressionContext {
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bang() { return GetToken(BilingualParser.Bang, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BangExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBangExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AbsoluteValueExpressionContext : ExpressionContext {
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add() { return GetToken(BilingualParser.Add, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AbsoluteValueExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbsoluteValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotEqualToExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(BilingualParser.NotEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotEqualToExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotEqualToExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterLessThanContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThan() { return GetToken(BilingualParser.GreaterThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(BilingualParser.LessThan, 0); }
		public GreaterLessThanContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterLessThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesesExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(BilingualParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClosed() { return GetToken(BilingualParser.ParenClosed, 0); }
		public ParenthesesExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateExpressionContext : ExpressionContext {
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sub() { return GetToken(BilingualParser.Sub, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegateExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		public MemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivModContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mul() { return GetToken(BilingualParser.Mul, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div() { return GetToken(BilingualParser.Div, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod() { return GetToken(BilingualParser.Mod, 0); }
		public MulDivModContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusMinusMulDivEqualExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PlusMinusMulDivEqualContext plusMinusMulDivEqual() {
			return GetRuleContext<PlusMinusMulDivEqualContext>(0);
		}
		public PlusMinusMulDivEqualExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusMinusMulDivEqualExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanLessThanEqualContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEqual() { return GetToken(BilingualParser.GreaterThanEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEqual() { return GetToken(BilingualParser.LessThanEqual, 0); }
		public GreaterThanLessThanEqualContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanLessThanEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncrementAndDecrementExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IncrementsAndDecrementsContext incrementsAndDecrements() {
			return GetRuleContext<IncrementsAndDecrementsContext>(0);
		}
		public IncrementAndDecrementExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementAndDecrementExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualToExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EqualTo() { return GetToken(BilingualParser.EqualTo, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualToExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualToExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				_localctx = new ParenthesesExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 105;
				Match(ParenOpen);
				State = 106;
				expression(0);
				State = 107;
				Match(ParenClosed);
				}
				break;
			case 2:
				{
				_localctx = new BangExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 109;
				Match(Bang);
				State = 110;
				((BangExpressionContext)_localctx).right = expression(11);
				}
				break;
			case 3:
				{
				_localctx = new NegateExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 111;
				Match(Sub);
				State = 112;
				((NegateExpressionContext)_localctx).right = expression(10);
				}
				break;
			case 4:
				{
				_localctx = new AbsoluteValueExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 113;
				Match(Add);
				State = 114;
				((AbsoluteValueExpressionContext)_localctx).right = expression(9);
				}
				break;
			case 5:
				{
				_localctx = new PlusMinusMulDivEqualExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 115;
				plusMinusMulDivEqual();
				}
				break;
			case 6:
				{
				_localctx = new IncrementAndDecrementExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 116;
				incrementsAndDecrements();
				}
				break;
			case 7:
				{
				_localctx = new FunctionCallExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 117;
				functionCall();
				}
				break;
			case 8:
				{
				_localctx = new MemberExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 118;
				member();
				}
				break;
			case 9:
				{
				_localctx = new ArrayAccessExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 119;
				arrayAccess();
				}
				break;
			case 10:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 120;
				literal();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 146;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 144;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new PowExprContext(new ExpressionContext(_parentctx, _parentState));
						((PowExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 123;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 124;
						Match(Pow);
						State = 125;
						((PowExprContext)_localctx).right = expression(17);
						}
						break;
					case 2:
						{
						_localctx = new MulDivModContext(new ExpressionContext(_parentctx, _parentState));
						((MulDivModContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 126;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 127;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1703936L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 128;
						((MulDivModContext)_localctx).right = expression(16);
						}
						break;
					case 3:
						{
						_localctx = new AddSubContext(new ExpressionContext(_parentctx, _parentState));
						((AddSubContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 129;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 130;
						_la = TokenStream.LA(1);
						if ( !(_la==Add || _la==Sub) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 131;
						((AddSubContext)_localctx).right = expression(15);
						}
						break;
					case 4:
						{
						_localctx = new EqualToExprContext(new ExpressionContext(_parentctx, _parentState));
						((EqualToExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 132;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 133;
						Match(EqualTo);
						State = 134;
						((EqualToExprContext)_localctx).right = expression(14);
						}
						break;
					case 5:
						{
						_localctx = new NotEqualToExprContext(new ExpressionContext(_parentctx, _parentState));
						((NotEqualToExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 135;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 136;
						Match(NotEqual);
						State = 137;
						((NotEqualToExprContext)_localctx).right = expression(13);
						}
						break;
					case 6:
						{
						_localctx = new GreaterLessThanContext(new ExpressionContext(_parentctx, _parentState));
						((GreaterLessThanContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 138;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 139;
						_la = TokenStream.LA(1);
						if ( !(_la==GreaterThan || _la==LessThan) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 140;
						((GreaterLessThanContext)_localctx).right = expression(8);
						}
						break;
					case 7:
						{
						_localctx = new GreaterThanLessThanEqualContext(new ExpressionContext(_parentctx, _parentState));
						((GreaterThanLessThanEqualContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 141;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 142;
						_la = TokenStream.LA(1);
						if ( !(_la==GreaterThanEqual || _la==LessThanEqual) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 143;
						((GreaterThanLessThanEqualContext)_localctx).right = expression(7);
						}
						break;
					}
					} 
				}
				State = 148;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(BilingualParser.String, 0); }
		public StringLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayObjectContext arrayObject() {
			return GetRuleContext<ArrayObjectContext>(0);
		}
		public ArrayLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrueFalseLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(BilingualParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(BilingualParser.False, 0); }
		public TrueFalseLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrueFalseLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(BilingualParser.Number, 0); }
		public NumberLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 10, RULE_literal);
		int _la;
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SquareOpen:
				_localctx = new ArrayLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 149;
				arrayObject();
				}
				break;
			case True:
			case False:
				_localctx = new TrueFalseLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 150;
				_la = TokenStream.LA(1);
				if ( !(_la==True || _la==False) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case Number:
				_localctx = new NumberLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 151;
				Match(Number);
				}
				break;
			case String:
				_localctx = new StringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 152;
				Match(String);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CurlyOpen() { return GetToken(BilingualParser.CurlyOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CurlyClosed() { return GetToken(BilingualParser.CurlyClosed, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Add:
			case Sub:
			case If:
			case While:
			case Do:
			case For:
			case Foreach:
			case Continue:
			case Break:
			case Return:
			case Var:
			case Global:
			case Choose:
			case MemberName:
				{
				State = 155;
				statement();
				}
				break;
			case CurlyOpen:
				{
				State = 156;
				Match(CurlyOpen);
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 241862499631104L) != 0)) {
					{
					{
					State = 157;
					statement();
					}
					}
					State = 162;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 163;
				Match(CurlyClosed);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionCallStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(BilingualParser.Semicolon, 0); }
		public FunctionCallStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncrementDecrementStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public IncrementsAndDecrementsContext incrementsAndDecrements() {
			return GetRuleContext<IncrementsAndDecrementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(BilingualParser.Semicolon, 0); }
		public IncrementDecrementStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementDecrementStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForEachStatementContext forEachStatement() {
			return GetRuleContext<ForEachStatementContext>(0);
		}
		public ForEachStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoWhileStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DoWhileStatementContext doWhileStatement() {
			return GetRuleContext<DoWhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(BilingualParser.Semicolon, 0); }
		public DoWhileStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(BilingualParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(BilingualParser.Semicolon, 0); }
		public ContinueStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ChooseStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChooseStatementContext chooseStatement() {
			return GetRuleContext<ChooseStatementContext>(0);
		}
		public ChooseStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChooseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DialogueStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DialogueStatementContext dialogueStatement() {
			return GetRuleContext<DialogueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(BilingualParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineId() { return GetToken(BilingualParser.LineId, 0); }
		public DialogueStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDialogueStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusMinusMulDivStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public PlusMinusMulDivEqualContext plusMinusMulDivEqual() {
			return GetRuleContext<PlusMinusMulDivEqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(BilingualParser.Semicolon, 0); }
		public PlusMinusMulDivStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusMinusMulDivStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public VariableDeclarationStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public IfStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAssignmentStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberAssignmentContext memberAssignment() {
			return GetRuleContext<MemberAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(BilingualParser.Semicolon, 0); }
		public MemberAssignmentStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAssignmentStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public WhileStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(BilingualParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(BilingualParser.Semicolon, 0); }
		public BreakStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(BilingualParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(BilingualParser.Semicolon, 0); }
		public ReturnStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public ForStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		int _la;
		try {
			State = 198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new DoWhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 166;
				doWhileStatement();
				State = 167;
				Match(Semicolon);
				}
				break;
			case 2:
				_localctx = new DialogueStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 169;
				dialogueStatement();
				State = 170;
				Match(Semicolon);
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LineId) {
					{
					State = 171;
					Match(LineId);
					}
				}

				}
				break;
			case 3:
				_localctx = new MemberAssignmentStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 174;
				memberAssignment();
				State = 175;
				Match(Semicolon);
				}
				break;
			case 4:
				_localctx = new FunctionCallStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 177;
				functionCall();
				State = 178;
				Match(Semicolon);
				}
				break;
			case 5:
				_localctx = new IncrementDecrementStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 180;
				incrementsAndDecrements();
				State = 181;
				Match(Semicolon);
				}
				break;
			case 6:
				_localctx = new PlusMinusMulDivStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 183;
				plusMinusMulDivEqual();
				State = 184;
				Match(Semicolon);
				}
				break;
			case 7:
				_localctx = new ContinueStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 186;
				Match(Continue);
				State = 187;
				Match(Semicolon);
				}
				break;
			case 8:
				_localctx = new BreakStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 188;
				Match(Break);
				State = 189;
				Match(Semicolon);
				}
				break;
			case 9:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 190;
				Match(Return);
				State = 191;
				Match(Semicolon);
				}
				break;
			case 10:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 192;
				ifStatement();
				}
				break;
			case 11:
				_localctx = new VariableDeclarationStmtContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 193;
				variableDeclaration();
				}
				break;
			case 12:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 194;
				whileStatement();
				}
				break;
			case 13:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 195;
				forStatement();
				}
				break;
			case 14:
				_localctx = new ForEachStmtContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 196;
				forEachStatement();
				}
				break;
			case 15:
				_localctx = new ChooseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 197;
				chooseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(BilingualParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MemberName() { return GetToken(BilingualParser.MemberName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(BilingualParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(BilingualParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(BilingualParser.Global, 0); }
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Global) {
				{
				State = 200;
				Match(Global);
				}
			}

			State = 203;
			Match(Var);
			State = 204;
			Match(MemberName);
			State = 205;
			Match(Equal);
			State = 206;
			expression(0);
			State = 207;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(BilingualParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MemberAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAssignmentContext memberAssignment() {
		MemberAssignmentContext _localctx = new MemberAssignmentContext(Context, State);
		EnterRule(_localctx, 18, RULE_memberAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			member();
			State = 210;
			Match(Equal);
			State = 211;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MemberName() { return GetToken(BilingualParser.MemberName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessorContext[] accessor() {
			return GetRuleContexts<AccessorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorContext accessor(int i) {
			return GetRuleContext<AccessorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(BilingualParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(BilingualParser.Dot, i);
		}
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 20, RULE_member);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 213;
					accessor();
					State = 214;
					Match(Dot);
					}
					} 
				}
				State = 220;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 221;
			Match(MemberName);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(BilingualParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(BilingualParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClosed() { return GetToken(BilingualParser.ParenClosed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfElseStatementContext[] ifElseStatement() {
			return GetRuleContexts<IfElseStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfElseStatementContext ifElseStatement(int i) {
			return GetRuleContext<IfElseStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_ifStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(If);
			State = 224;
			Match(ParenOpen);
			State = 225;
			expression(0);
			State = 226;
			Match(ParenClosed);
			State = 227;
			block();
			State = 231;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 228;
					ifElseStatement();
					}
					} 
				}
				State = 233;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 235;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 234;
				elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ElseIf() { return GetToken(BilingualParser.ElseIf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(BilingualParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClosed() { return GetToken(BilingualParser.ParenClosed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseStatementContext ifElseStatement() {
		IfElseStatementContext _localctx = new IfElseStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_ifElseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(ElseIf);
			State = 238;
			Match(ParenOpen);
			State = 239;
			expression(0);
			State = 240;
			Match(ParenClosed);
			State = 241;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(BilingualParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			Match(Else);
			State = 244;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(BilingualParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(BilingualParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClosed() { return GetToken(BilingualParser.ParenClosed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			Match(While);
			State = 247;
			Match(ParenOpen);
			State = 248;
			expression(0);
			State = 249;
			Match(ParenClosed);
			State = 250;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(BilingualParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(BilingualParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(BilingualParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClosed() { return GetToken(BilingualParser.ParenClosed, 0); }
		public DoWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStatementContext doWhileStatement() {
		DoWhileStatementContext _localctx = new DoWhileStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_doWhileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			Match(Do);
			State = 253;
			block();
			State = 254;
			Match(While);
			State = 255;
			Match(ParenOpen);
			State = 256;
			expression(0);
			State = 257;
			Match(ParenClosed);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ExpressionContext loopCondition;
		public ExpressionContext alterIndex;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(BilingualParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(BilingualParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(BilingualParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClosed() { return GetToken(BilingualParser.ParenClosed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(For);
			State = 260;
			Match(ParenOpen);
			State = 261;
			variableDeclaration();
			State = 262;
			_localctx.loopCondition = expression(0);
			State = 263;
			Match(Semicolon);
			State = 264;
			_localctx.alterIndex = expression(0);
			State = 265;
			Match(ParenClosed);
			State = 266;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStatementContext : ParserRuleContext {
		public ExpressionContext item;
		public ExpressionContext collection;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Foreach() { return GetToken(BilingualParser.Foreach, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(BilingualParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(BilingualParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClosed() { return GetToken(BilingualParser.ParenClosed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForEachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStatementContext forEachStatement() {
		ForEachStatementContext _localctx = new ForEachStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_forEachStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(Foreach);
			State = 269;
			Match(ParenOpen);
			State = 270;
			_localctx.item = expression(0);
			State = 271;
			Match(In);
			State = 272;
			_localctx.collection = expression(0);
			State = 273;
			Match(ParenClosed);
			State = 274;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DialogueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MemberName() { return GetToken(BilingualParser.MemberName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(BilingualParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DialogueEmotionContext dialogueEmotion() {
			return GetRuleContext<DialogueEmotionContext>(0);
		}
		public DialogueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dialogueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDialogueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DialogueStatementContext dialogueStatement() {
		DialogueStatementContext _localctx = new DialogueStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_dialogueStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(MemberName);
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ParenOpen) {
				{
				State = 277;
				dialogueEmotion();
				}
			}

			State = 280;
			Match(Colon);
			State = 281;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DialogueEmotionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(BilingualParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MemberName() { return GetToken(BilingualParser.MemberName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClosed() { return GetToken(BilingualParser.ParenClosed, 0); }
		public DialogueEmotionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dialogueEmotion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDialogueEmotion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DialogueEmotionContext dialogueEmotion() {
		DialogueEmotionContext _localctx = new DialogueEmotionContext(Context, State);
		EnterRule(_localctx, 38, RULE_dialogueEmotion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(ParenOpen);
			State = 284;
			Match(MemberName);
			State = 285;
			Match(ParenClosed);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChooseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChooseBlockContext[] chooseBlock() {
			return GetRuleContexts<ChooseBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChooseBlockContext chooseBlock(int i) {
			return GetRuleContext<ChooseBlockContext>(i);
		}
		public ChooseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chooseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChooseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChooseStatementContext chooseStatement() {
		ChooseStatementContext _localctx = new ChooseStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_chooseStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			chooseBlock();
			State = 288;
			chooseBlock();
			State = 292;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 289;
					chooseBlock();
					}
					} 
				}
				State = 294;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChooseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Choose() { return GetToken(BilingualParser.Choose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ChooseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chooseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChooseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChooseBlockContext chooseBlock() {
		ChooseBlockContext _localctx = new ChooseBlockContext(Context, State);
		EnterRule(_localctx, 42, RULE_chooseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(Choose);
			State = 296;
			expression(0);
			State = 297;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MemberName() { return GetToken(BilingualParser.MemberName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(BilingualParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClosed() { return GetToken(BilingualParser.ParenClosed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessorContext[] accessor() {
			return GetRuleContexts<AccessorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorContext accessor(int i) {
			return GetRuleContext<AccessorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(BilingualParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(BilingualParser.Dot, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 44, RULE_functionCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 299;
					accessor();
					State = 300;
					Match(Dot);
					}
					} 
				}
				State = 306;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 307;
			Match(MemberName);
			State = 308;
			Match(ParenOpen);
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18436614202066984L) != 0)) {
				{
				{
				State = 309;
				param();
				}
				}
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 315;
			Match(ParenClosed);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(BilingualParser.Comma, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 46, RULE_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			expression(0);
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 318;
				Match(Comma);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayIndexerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SquareOpen() { return GetToken(BilingualParser.SquareOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SquareClosed() { return GetToken(BilingualParser.SquareClosed, 0); }
		public ArrayIndexerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIndexer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIndexer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIndexerContext arrayIndexer() {
		ArrayIndexerContext _localctx = new ArrayIndexerContext(Context, State);
		EnterRule(_localctx, 48, RULE_arrayIndexer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			Match(SquareOpen);
			State = 322;
			expression(0);
			State = 323;
			Match(SquareClosed);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SquareOpen() { return GetToken(BilingualParser.SquareOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SquareClosed() { return GetToken(BilingualParser.SquareClosed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(BilingualParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(BilingualParser.Comma, i);
		}
		public ArrayObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayObjectContext arrayObject() {
		ArrayObjectContext _localctx = new ArrayObjectContext(Context, State);
		EnterRule(_localctx, 50, RULE_arrayObject);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			Match(SquareOpen);
			State = 331;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 326;
					expression(0);
					State = 327;
					Match(Comma);
					}
					} 
				}
				State = 333;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18436614202066984L) != 0)) {
				{
				State = 334;
				expression(0);
				}
			}

			State = 337;
			Match(SquareClosed);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MemberName() { return GetToken(BilingualParser.MemberName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(BilingualParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClosed() { return GetToken(BilingualParser.ParenClosed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexerContext arrayIndexer() {
			return GetRuleContext<ArrayIndexerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public AccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorContext accessor() {
		AccessorContext _localctx = new AccessorContext(Context, State);
		EnterRule(_localctx, 52, RULE_accessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			Match(MemberName);
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ParenOpen) {
				{
				State = 340;
				Match(ParenOpen);
				State = 344;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18436614202066984L) != 0)) {
					{
					{
					State = 341;
					param();
					}
					}
					State = 346;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 347;
				Match(ParenClosed);
				}
			}

			State = 351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SquareOpen) {
				{
				State = 350;
				arrayIndexer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexerContext arrayIndexer() {
			return GetRuleContext<ArrayIndexerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 54, RULE_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 353;
				functionCall();
				}
				break;
			case 2:
				{
				State = 354;
				member();
				}
				break;
			}
			State = 357;
			arrayIndexer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryIncrementLeftContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Add() { return GetTokens(BilingualParser.Add); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add(int i) {
			return GetToken(BilingualParser.Add, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		public UnaryIncrementLeftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryIncrementLeft; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryIncrementLeft(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryIncrementLeftContext unaryIncrementLeft() {
		UnaryIncrementLeftContext _localctx = new UnaryIncrementLeftContext(Context, State);
		EnterRule(_localctx, 56, RULE_unaryIncrementLeft);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			Match(Add);
			State = 360;
			Match(Add);
			State = 361;
			member();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryIncrementRightContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Add() { return GetTokens(BilingualParser.Add); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add(int i) {
			return GetToken(BilingualParser.Add, i);
		}
		public UnaryIncrementRightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryIncrementRight; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryIncrementRight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryIncrementRightContext unaryIncrementRight() {
		UnaryIncrementRightContext _localctx = new UnaryIncrementRightContext(Context, State);
		EnterRule(_localctx, 58, RULE_unaryIncrementRight);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			member();
			State = 364;
			Match(Add);
			State = 365;
			Match(Add);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryDecrementLeftContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sub() { return GetTokens(BilingualParser.Sub); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sub(int i) {
			return GetToken(BilingualParser.Sub, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		public UnaryDecrementLeftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryDecrementLeft; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryDecrementLeft(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryDecrementLeftContext unaryDecrementLeft() {
		UnaryDecrementLeftContext _localctx = new UnaryDecrementLeftContext(Context, State);
		EnterRule(_localctx, 60, RULE_unaryDecrementLeft);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			Match(Sub);
			State = 368;
			Match(Sub);
			State = 369;
			member();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryDecrementRightContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sub() { return GetTokens(BilingualParser.Sub); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sub(int i) {
			return GetToken(BilingualParser.Sub, i);
		}
		public UnaryDecrementRightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryDecrementRight; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryDecrementRight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryDecrementRightContext unaryDecrementRight() {
		UnaryDecrementRightContext _localctx = new UnaryDecrementRightContext(Context, State);
		EnterRule(_localctx, 62, RULE_unaryDecrementRight);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			member();
			State = 372;
			Match(Sub);
			State = 373;
			Match(Sub);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlusMinusMulDivEqualContext : ParserRuleContext {
		public PlusMinusMulDivEqualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plusMinusMulDivEqual; } }
	 
		public PlusMinusMulDivEqualContext() { }
		public virtual void CopyFrom(PlusMinusMulDivEqualContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MulDivEqualToContext : PlusMinusMulDivEqualContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MulEqual() { return GetToken(BilingualParser.MulEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivEqual() { return GetToken(BilingualParser.DivEqual, 0); }
		public MulDivEqualToContext(PlusMinusMulDivEqualContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivEqualTo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusMinusEqualToContext : PlusMinusMulDivEqualContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusEqual() { return GetToken(BilingualParser.PlusEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusEqual() { return GetToken(BilingualParser.MinusEqual, 0); }
		public PlusMinusEqualToContext(PlusMinusMulDivEqualContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusMinusEqualTo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlusMinusMulDivEqualContext plusMinusMulDivEqual() {
		PlusMinusMulDivEqualContext _localctx = new PlusMinusMulDivEqualContext(Context, State);
		EnterRule(_localctx, 64, RULE_plusMinusMulDivEqual);
		int _la;
		try {
			State = 383;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				_localctx = new MulDivEqualToContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 375;
				member();
				State = 376;
				_la = TokenStream.LA(1);
				if ( !(_la==MulEqual || _la==DivEqual) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 377;
				expression(0);
				}
				break;
			case 2:
				_localctx = new PlusMinusEqualToContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 379;
				member();
				State = 380;
				_la = TokenStream.LA(1);
				if ( !(_la==PlusEqual || _la==MinusEqual) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 381;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementsAndDecrementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryIncrementLeftContext unaryIncrementLeft() {
			return GetRuleContext<UnaryIncrementLeftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryIncrementRightContext unaryIncrementRight() {
			return GetRuleContext<UnaryIncrementRightContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryDecrementLeftContext unaryDecrementLeft() {
			return GetRuleContext<UnaryDecrementLeftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryDecrementRightContext unaryDecrementRight() {
			return GetRuleContext<UnaryDecrementRightContext>(0);
		}
		public IncrementsAndDecrementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incrementsAndDecrements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBilingualParserVisitor<TResult> typedVisitor = visitor as IBilingualParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementsAndDecrements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementsAndDecrementsContext incrementsAndDecrements() {
		IncrementsAndDecrementsContext _localctx = new IncrementsAndDecrementsContext(Context, State);
		EnterRule(_localctx, 66, RULE_incrementsAndDecrements);
		try {
			State = 389;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 385;
				unaryIncrementLeft();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 386;
				unaryIncrementRight();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 387;
				unaryDecrementLeft();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 388;
				unaryDecrementRight();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 16);
		case 1: return Precpred(Context, 15);
		case 2: return Precpred(Context, 14);
		case 3: return Precpred(Context, 13);
		case 4: return Precpred(Context, 12);
		case 5: return Precpred(Context, 7);
		case 6: return Precpred(Context, 6);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,54,392,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,4,0,70,8,0,11,0,
		12,0,71,1,0,3,0,75,8,0,1,1,1,1,1,1,5,1,80,8,1,10,1,12,1,83,9,1,1,1,1,1,
		1,2,5,2,88,8,2,10,2,12,2,91,9,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,3,4,122,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,145,8,4,10,4,12,4,148,9,4,1,5,1,
		5,1,5,1,5,3,5,154,8,5,1,6,1,6,1,6,5,6,159,8,6,10,6,12,6,162,9,6,1,6,3,
		6,165,8,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,173,8,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,3,7,199,8,7,1,8,3,8,202,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
		1,10,1,10,1,10,5,10,217,8,10,10,10,12,10,220,9,10,1,10,1,10,1,11,1,11,
		1,11,1,11,1,11,1,11,5,11,230,8,11,10,11,12,11,233,9,11,1,11,3,11,236,8,
		11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,
		14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,3,
		18,279,8,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,5,20,291,
		8,20,10,20,12,20,294,9,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,5,22,303,
		8,22,10,22,12,22,306,9,22,1,22,1,22,1,22,5,22,311,8,22,10,22,12,22,314,
		9,22,1,22,1,22,1,23,1,23,3,23,320,8,23,1,24,1,24,1,24,1,24,1,25,1,25,1,
		25,1,25,5,25,330,8,25,10,25,12,25,333,9,25,1,25,3,25,336,8,25,1,25,1,25,
		1,26,1,26,1,26,5,26,343,8,26,10,26,12,26,346,9,26,1,26,3,26,349,8,26,1,
		26,3,26,352,8,26,1,27,1,27,3,27,356,8,27,1,27,1,27,1,28,1,28,1,28,1,28,
		1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,
		1,32,1,32,1,32,1,32,1,32,1,32,3,32,384,8,32,1,33,1,33,1,33,1,33,3,33,390,
		8,33,1,33,0,1,8,34,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,0,7,2,0,17,17,19,20,1,0,21,
		22,1,0,23,24,1,0,25,26,1,0,30,31,1,0,15,16,1,0,13,14,416,0,69,1,0,0,0,
		2,76,1,0,0,0,4,89,1,0,0,0,6,97,1,0,0,0,8,121,1,0,0,0,10,153,1,0,0,0,12,
		164,1,0,0,0,14,198,1,0,0,0,16,201,1,0,0,0,18,209,1,0,0,0,20,218,1,0,0,
		0,22,223,1,0,0,0,24,237,1,0,0,0,26,243,1,0,0,0,28,246,1,0,0,0,30,252,1,
		0,0,0,32,259,1,0,0,0,34,268,1,0,0,0,36,276,1,0,0,0,38,283,1,0,0,0,40,287,
		1,0,0,0,42,295,1,0,0,0,44,304,1,0,0,0,46,317,1,0,0,0,48,321,1,0,0,0,50,
		325,1,0,0,0,52,339,1,0,0,0,54,355,1,0,0,0,56,359,1,0,0,0,58,363,1,0,0,
		0,60,367,1,0,0,0,62,371,1,0,0,0,64,383,1,0,0,0,66,389,1,0,0,0,68,70,3,
		2,1,0,69,68,1,0,0,0,70,71,1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,74,1,
		0,0,0,73,75,5,0,0,1,74,73,1,0,0,0,74,75,1,0,0,0,75,1,1,0,0,0,76,77,5,47,
		0,0,77,81,5,1,0,0,78,80,3,4,2,0,79,78,1,0,0,0,80,83,1,0,0,0,81,79,1,0,
		0,0,81,82,1,0,0,0,82,84,1,0,0,0,83,81,1,0,0,0,84,85,5,2,0,0,85,3,1,0,0,
		0,86,88,3,6,3,0,87,86,1,0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,
		0,90,92,1,0,0,0,91,89,1,0,0,0,92,93,5,47,0,0,93,94,5,5,0,0,94,95,5,6,0,
		0,95,96,3,12,6,0,96,5,1,0,0,0,97,98,5,3,0,0,98,99,5,47,0,0,99,100,5,5,
		0,0,100,101,3,8,4,0,101,102,5,6,0,0,102,103,5,4,0,0,103,7,1,0,0,0,104,
		105,6,4,-1,0,105,106,5,5,0,0,106,107,3,8,4,0,107,108,5,6,0,0,108,122,1,
		0,0,0,109,110,5,11,0,0,110,122,3,8,4,11,111,112,5,22,0,0,112,122,3,8,4,
		10,113,114,5,21,0,0,114,122,3,8,4,9,115,122,3,64,32,0,116,122,3,66,33,
		0,117,122,3,44,22,0,118,122,3,20,10,0,119,122,3,54,27,0,120,122,3,10,5,
		0,121,104,1,0,0,0,121,109,1,0,0,0,121,111,1,0,0,0,121,113,1,0,0,0,121,
		115,1,0,0,0,121,116,1,0,0,0,121,117,1,0,0,0,121,118,1,0,0,0,121,119,1,
		0,0,0,121,120,1,0,0,0,122,146,1,0,0,0,123,124,10,16,0,0,124,125,5,18,0,
		0,125,145,3,8,4,17,126,127,10,15,0,0,127,128,7,0,0,0,128,145,3,8,4,16,
		129,130,10,14,0,0,130,131,7,1,0,0,131,145,3,8,4,15,132,133,10,13,0,0,133,
		134,5,12,0,0,134,145,3,8,4,14,135,136,10,12,0,0,136,137,5,10,0,0,137,145,
		3,8,4,13,138,139,10,7,0,0,139,140,7,2,0,0,140,145,3,8,4,8,141,142,10,6,
		0,0,142,143,7,3,0,0,143,145,3,8,4,7,144,123,1,0,0,0,144,126,1,0,0,0,144,
		129,1,0,0,0,144,132,1,0,0,0,144,135,1,0,0,0,144,138,1,0,0,0,144,141,1,
		0,0,0,145,148,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,9,1,0,0,0,148,
		146,1,0,0,0,149,154,3,50,25,0,150,154,7,4,0,0,151,154,5,48,0,0,152,154,
		5,54,0,0,153,149,1,0,0,0,153,150,1,0,0,0,153,151,1,0,0,0,153,152,1,0,0,
		0,154,11,1,0,0,0,155,165,3,14,7,0,156,160,5,1,0,0,157,159,3,14,7,0,158,
		157,1,0,0,0,159,162,1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,163,1,
		0,0,0,162,160,1,0,0,0,163,165,5,2,0,0,164,155,1,0,0,0,164,156,1,0,0,0,
		165,13,1,0,0,0,166,167,3,30,15,0,167,168,5,7,0,0,168,199,1,0,0,0,169,170,
		3,36,18,0,170,172,5,7,0,0,171,173,5,49,0,0,172,171,1,0,0,0,172,173,1,0,
		0,0,173,199,1,0,0,0,174,175,3,18,9,0,175,176,5,7,0,0,176,199,1,0,0,0,177,
		178,3,44,22,0,178,179,5,7,0,0,179,199,1,0,0,0,180,181,3,66,33,0,181,182,
		5,7,0,0,182,199,1,0,0,0,183,184,3,64,32,0,184,185,5,7,0,0,185,199,1,0,
		0,0,186,187,5,39,0,0,187,199,5,7,0,0,188,189,5,40,0,0,189,199,5,7,0,0,
		190,191,5,41,0,0,191,199,5,7,0,0,192,199,3,22,11,0,193,199,3,16,8,0,194,
		199,3,28,14,0,195,199,3,32,16,0,196,199,3,34,17,0,197,199,3,40,20,0,198,
		166,1,0,0,0,198,169,1,0,0,0,198,174,1,0,0,0,198,177,1,0,0,0,198,180,1,
		0,0,0,198,183,1,0,0,0,198,186,1,0,0,0,198,188,1,0,0,0,198,190,1,0,0,0,
		198,192,1,0,0,0,198,193,1,0,0,0,198,194,1,0,0,0,198,195,1,0,0,0,198,196,
		1,0,0,0,198,197,1,0,0,0,199,15,1,0,0,0,200,202,5,44,0,0,201,200,1,0,0,
		0,201,202,1,0,0,0,202,203,1,0,0,0,203,204,5,43,0,0,204,205,5,47,0,0,205,
		206,5,9,0,0,206,207,3,8,4,0,207,208,5,7,0,0,208,17,1,0,0,0,209,210,3,20,
		10,0,210,211,5,9,0,0,211,212,3,8,4,0,212,19,1,0,0,0,213,214,3,52,26,0,
		214,215,5,27,0,0,215,217,1,0,0,0,216,213,1,0,0,0,217,220,1,0,0,0,218,216,
		1,0,0,0,218,219,1,0,0,0,219,221,1,0,0,0,220,218,1,0,0,0,221,222,5,47,0,
		0,222,21,1,0,0,0,223,224,5,32,0,0,224,225,5,5,0,0,225,226,3,8,4,0,226,
		227,5,6,0,0,227,231,3,12,6,0,228,230,3,24,12,0,229,228,1,0,0,0,230,233,
		1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,235,1,0,0,0,233,231,1,0,0,
		0,234,236,3,26,13,0,235,234,1,0,0,0,235,236,1,0,0,0,236,23,1,0,0,0,237,
		238,5,33,0,0,238,239,5,5,0,0,239,240,3,8,4,0,240,241,5,6,0,0,241,242,3,
		12,6,0,242,25,1,0,0,0,243,244,5,34,0,0,244,245,3,12,6,0,245,27,1,0,0,0,
		246,247,5,35,0,0,247,248,5,5,0,0,248,249,3,8,4,0,249,250,5,6,0,0,250,251,
		3,12,6,0,251,29,1,0,0,0,252,253,5,36,0,0,253,254,3,12,6,0,254,255,5,35,
		0,0,255,256,5,5,0,0,256,257,3,8,4,0,257,258,5,6,0,0,258,31,1,0,0,0,259,
		260,5,37,0,0,260,261,5,5,0,0,261,262,3,16,8,0,262,263,3,8,4,0,263,264,
		5,7,0,0,264,265,3,8,4,0,265,266,5,6,0,0,266,267,3,12,6,0,267,33,1,0,0,
		0,268,269,5,38,0,0,269,270,5,5,0,0,270,271,3,8,4,0,271,272,5,45,0,0,272,
		273,3,8,4,0,273,274,5,6,0,0,274,275,3,12,6,0,275,35,1,0,0,0,276,278,5,
		47,0,0,277,279,3,38,19,0,278,277,1,0,0,0,278,279,1,0,0,0,279,280,1,0,0,
		0,280,281,5,8,0,0,281,282,3,8,4,0,282,37,1,0,0,0,283,284,5,5,0,0,284,285,
		5,47,0,0,285,286,5,6,0,0,286,39,1,0,0,0,287,288,3,42,21,0,288,292,3,42,
		21,0,289,291,3,42,21,0,290,289,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,
		292,293,1,0,0,0,293,41,1,0,0,0,294,292,1,0,0,0,295,296,5,46,0,0,296,297,
		3,8,4,0,297,298,3,12,6,0,298,43,1,0,0,0,299,300,3,52,26,0,300,301,5,27,
		0,0,301,303,1,0,0,0,302,299,1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,304,
		305,1,0,0,0,305,307,1,0,0,0,306,304,1,0,0,0,307,308,5,47,0,0,308,312,5,
		5,0,0,309,311,3,46,23,0,310,309,1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,
		0,312,313,1,0,0,0,313,315,1,0,0,0,314,312,1,0,0,0,315,316,5,6,0,0,316,
		45,1,0,0,0,317,319,3,8,4,0,318,320,5,28,0,0,319,318,1,0,0,0,319,320,1,
		0,0,0,320,47,1,0,0,0,321,322,5,3,0,0,322,323,3,8,4,0,323,324,5,4,0,0,324,
		49,1,0,0,0,325,331,5,3,0,0,326,327,3,8,4,0,327,328,5,28,0,0,328,330,1,
		0,0,0,329,326,1,0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,
		332,335,1,0,0,0,333,331,1,0,0,0,334,336,3,8,4,0,335,334,1,0,0,0,335,336,
		1,0,0,0,336,337,1,0,0,0,337,338,5,4,0,0,338,51,1,0,0,0,339,348,5,47,0,
		0,340,344,5,5,0,0,341,343,3,46,23,0,342,341,1,0,0,0,343,346,1,0,0,0,344,
		342,1,0,0,0,344,345,1,0,0,0,345,347,1,0,0,0,346,344,1,0,0,0,347,349,5,
		6,0,0,348,340,1,0,0,0,348,349,1,0,0,0,349,351,1,0,0,0,350,352,3,48,24,
		0,351,350,1,0,0,0,351,352,1,0,0,0,352,53,1,0,0,0,353,356,3,44,22,0,354,
		356,3,20,10,0,355,353,1,0,0,0,355,354,1,0,0,0,356,357,1,0,0,0,357,358,
		3,48,24,0,358,55,1,0,0,0,359,360,5,21,0,0,360,361,5,21,0,0,361,362,3,20,
		10,0,362,57,1,0,0,0,363,364,3,20,10,0,364,365,5,21,0,0,365,366,5,21,0,
		0,366,59,1,0,0,0,367,368,5,22,0,0,368,369,5,22,0,0,369,370,3,20,10,0,370,
		61,1,0,0,0,371,372,3,20,10,0,372,373,5,22,0,0,373,374,5,22,0,0,374,63,
		1,0,0,0,375,376,3,20,10,0,376,377,7,5,0,0,377,378,3,8,4,0,378,384,1,0,
		0,0,379,380,3,20,10,0,380,381,7,6,0,0,381,382,3,8,4,0,382,384,1,0,0,0,
		383,375,1,0,0,0,383,379,1,0,0,0,384,65,1,0,0,0,385,390,3,56,28,0,386,390,
		3,58,29,0,387,390,3,60,30,0,388,390,3,62,31,0,389,385,1,0,0,0,389,386,
		1,0,0,0,389,387,1,0,0,0,389,388,1,0,0,0,390,67,1,0,0,0,29,71,74,81,89,
		121,144,146,153,160,164,172,198,201,218,231,235,278,292,304,312,319,331,
		335,344,348,351,355,383,389
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
