//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BilingualLexer.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class BilingualLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CurlyOpen=1, CurlyClosed=2, SquareOpen=3, SquareClosed=4, ParenOpen=5, 
		ParenClosed=6, Semicolon=7, Colon=8, Equal=9, NotEqual=10, Bang=11, EqualTo=12, 
		PlusEqual=13, MinusEqual=14, MulEqual=15, DivEqual=16, Mod=17, Pow=18, 
		Mul=19, Div=20, Add=21, Sub=22, GreaterThan=23, LessThan=24, GreaterThanEqual=25, 
		LessThanEqual=26, Dot=27, Comma=28, Hash=29, True=30, False=31, If=32, 
		ElseIf=33, Else=34, While=35, Do=36, For=37, Foreach=38, Continue=39, 
		Break=40, Return=41, Await=42, Var=43, Global=44, In=45, Choose=46, Run=47, 
		Inject=48, Zero=49, One=50, Two=51, Other=52, Few=53, Many=54, Plural=55, 
		Ordinal=56, MemberName=57, Number=58, LineId=59, LineIdComment=60, DoubleQuote=61, 
		DollarDouble=62, WS=63, Comment=64, String=65, EscapeSequence=66, StringCurly=67, 
		Text=68;
	public const int
		IN_STRING=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "IN_STRING"
	};

	public static readonly string[] ruleNames = {
		"CurlyOpen", "CurlyClosed", "SquareOpen", "SquareClosed", "ParenOpen", 
		"ParenClosed", "Semicolon", "Colon", "Equal", "NotEqual", "Bang", "EqualTo", 
		"PlusEqual", "MinusEqual", "MulEqual", "DivEqual", "Mod", "Pow", "Mul", 
		"Div", "Add", "Sub", "GreaterThan", "LessThan", "GreaterThanEqual", "LessThanEqual", 
		"Dot", "Comma", "Hash", "True", "False", "If", "ElseIf", "Else", "While", 
		"Do", "For", "Foreach", "Continue", "Break", "Return", "Await", "Var", 
		"Global", "In", "Choose", "Run", "Inject", "Zero", "One", "Two", "Other", 
		"Few", "Many", "Plural", "Ordinal", "MemberName", "Number", "LineId", 
		"LineIdComment", "DoubleQuote", "DollarDouble", "Letter", "Digit", "WS", 
		"Comment", "String", "EscapeSequence", "StringCurly", "DoubleQuoteInString", 
		"Text"
	};


	public BilingualLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BilingualLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "'}'", "'['", "']'", "'('", "')'", "';'", "':'", "'='", "'!='", 
		"'!'", "'=='", "'+='", "'-='", "'*='", "'/='", "'%'", "'^'", "'*'", "'/'", 
		"'+'", "'-'", "'>'", "'<'", "'<='", "'>='", "'.'", "','", "'#'", "'true'", 
		"'false'", "'if'", "'else if'", "'else'", "'while'", "'do'", "'for'", 
		"'foreach'", "'continue'", "'break'", "'return'", "'await'", "'var'", 
		"'global'", "'in'", "'choose'", "'run'", "'inject'", "'zero'", "'one'", 
		"'two'", "'other'", "'few'", "'many'", null, null, null, null, null, null, 
		null, "'$\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CurlyOpen", "CurlyClosed", "SquareOpen", "SquareClosed", "ParenOpen", 
		"ParenClosed", "Semicolon", "Colon", "Equal", "NotEqual", "Bang", "EqualTo", 
		"PlusEqual", "MinusEqual", "MulEqual", "DivEqual", "Mod", "Pow", "Mul", 
		"Div", "Add", "Sub", "GreaterThan", "LessThan", "GreaterThanEqual", "LessThanEqual", 
		"Dot", "Comma", "Hash", "True", "False", "If", "ElseIf", "Else", "While", 
		"Do", "For", "Foreach", "Continue", "Break", "Return", "Await", "Var", 
		"Global", "In", "Choose", "Run", "Inject", "Zero", "One", "Two", "Other", 
		"Few", "Many", "Plural", "Ordinal", "MemberName", "Number", "LineId", 
		"LineIdComment", "DoubleQuote", "DollarDouble", "WS", "Comment", "String", 
		"EscapeSequence", "StringCurly", "Text"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BilingualLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BilingualLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,68,471,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
		6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
		2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,
		2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,
		2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,
		2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
		2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
		2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,
		2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,
		2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,
		2,70,7,70,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,
		1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,
		1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,
		1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,
		1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,
		1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,
		1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,
		1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,
		1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,
		1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,
		1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
		1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,
		1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,49,1,49,
		1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,
		1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
		1,54,3,54,359,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,
		55,371,8,55,1,56,1,56,1,56,5,56,376,8,56,10,56,12,56,379,9,56,1,57,3,57,
		382,8,57,1,57,4,57,385,8,57,11,57,12,57,386,1,57,1,57,4,57,391,8,57,11,
		57,12,57,392,3,57,395,8,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
		1,58,3,58,407,8,58,1,59,1,59,1,59,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,
		62,1,62,1,63,1,63,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,5,65,431,8,65,
		10,65,12,65,434,9,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,3,66,443,8,66,
		5,66,445,8,66,10,66,12,66,448,9,66,1,66,1,66,1,67,1,67,1,67,1,68,1,68,
		1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,4,70,468,8,70,11,
		70,12,70,469,0,0,71,2,1,4,2,6,3,8,4,10,5,12,6,14,7,16,8,18,9,20,10,22,
		11,24,12,26,13,28,14,30,15,32,16,34,17,36,18,38,19,40,20,42,21,44,22,46,
		23,48,24,50,25,52,26,54,27,56,28,58,29,60,30,62,31,64,32,66,33,68,34,70,
		35,72,36,74,37,76,38,78,39,80,40,82,41,84,42,86,43,88,44,90,45,92,46,94,
		47,96,48,98,49,100,50,102,51,104,52,106,53,108,54,110,55,112,56,114,57,
		116,58,118,59,120,60,122,61,124,62,126,0,128,0,130,63,132,64,134,65,136,
		66,138,67,140,0,142,68,2,0,1,7,3,0,65,90,95,95,97,122,1,0,48,57,3,0,9,
		10,13,13,32,32,2,0,10,10,13,13,4,0,10,10,13,13,34,34,92,92,2,0,34,34,123,
		123,1,0,92,92,482,0,2,1,0,0,0,0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,0,0,0,10,
		1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,0,18,1,0,0,0,0,20,1,0,0,
		0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,0,0,28,1,0,0,0,0,30,1,0,0,0,0,32,
		1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,0,38,1,0,0,0,0,40,1,0,0,0,0,42,1,0,0,
		0,0,44,1,0,0,0,0,46,1,0,0,0,0,48,1,0,0,0,0,50,1,0,0,0,0,52,1,0,0,0,0,54,
		1,0,0,0,0,56,1,0,0,0,0,58,1,0,0,0,0,60,1,0,0,0,0,62,1,0,0,0,0,64,1,0,0,
		0,0,66,1,0,0,0,0,68,1,0,0,0,0,70,1,0,0,0,0,72,1,0,0,0,0,74,1,0,0,0,0,76,
		1,0,0,0,0,78,1,0,0,0,0,80,1,0,0,0,0,82,1,0,0,0,0,84,1,0,0,0,0,86,1,0,0,
		0,0,88,1,0,0,0,0,90,1,0,0,0,0,92,1,0,0,0,0,94,1,0,0,0,0,96,1,0,0,0,0,98,
		1,0,0,0,0,100,1,0,0,0,0,102,1,0,0,0,0,104,1,0,0,0,0,106,1,0,0,0,0,108,
		1,0,0,0,0,110,1,0,0,0,0,112,1,0,0,0,0,114,1,0,0,0,0,116,1,0,0,0,0,118,
		1,0,0,0,0,120,1,0,0,0,0,122,1,0,0,0,0,124,1,0,0,0,0,130,1,0,0,0,0,132,
		1,0,0,0,0,134,1,0,0,0,1,136,1,0,0,0,1,138,1,0,0,0,1,140,1,0,0,0,1,142,
		1,0,0,0,2,144,1,0,0,0,4,148,1,0,0,0,6,152,1,0,0,0,8,154,1,0,0,0,10,156,
		1,0,0,0,12,158,1,0,0,0,14,160,1,0,0,0,16,162,1,0,0,0,18,164,1,0,0,0,20,
		166,1,0,0,0,22,169,1,0,0,0,24,171,1,0,0,0,26,174,1,0,0,0,28,177,1,0,0,
		0,30,180,1,0,0,0,32,183,1,0,0,0,34,186,1,0,0,0,36,188,1,0,0,0,38,190,1,
		0,0,0,40,192,1,0,0,0,42,194,1,0,0,0,44,196,1,0,0,0,46,198,1,0,0,0,48,200,
		1,0,0,0,50,202,1,0,0,0,52,205,1,0,0,0,54,208,1,0,0,0,56,210,1,0,0,0,58,
		212,1,0,0,0,60,214,1,0,0,0,62,219,1,0,0,0,64,225,1,0,0,0,66,228,1,0,0,
		0,68,236,1,0,0,0,70,241,1,0,0,0,72,247,1,0,0,0,74,250,1,0,0,0,76,254,1,
		0,0,0,78,262,1,0,0,0,80,271,1,0,0,0,82,277,1,0,0,0,84,284,1,0,0,0,86,290,
		1,0,0,0,88,294,1,0,0,0,90,301,1,0,0,0,92,304,1,0,0,0,94,311,1,0,0,0,96,
		315,1,0,0,0,98,322,1,0,0,0,100,327,1,0,0,0,102,331,1,0,0,0,104,335,1,0,
		0,0,106,341,1,0,0,0,108,345,1,0,0,0,110,358,1,0,0,0,112,370,1,0,0,0,114,
		372,1,0,0,0,116,381,1,0,0,0,118,396,1,0,0,0,120,408,1,0,0,0,122,411,1,
		0,0,0,124,413,1,0,0,0,126,418,1,0,0,0,128,420,1,0,0,0,130,422,1,0,0,0,
		132,426,1,0,0,0,134,437,1,0,0,0,136,451,1,0,0,0,138,454,1,0,0,0,140,458,
		1,0,0,0,142,467,1,0,0,0,144,145,5,123,0,0,145,146,1,0,0,0,146,147,6,0,
		0,0,147,3,1,0,0,0,148,149,5,125,0,0,149,150,1,0,0,0,150,151,6,1,1,0,151,
		5,1,0,0,0,152,153,5,91,0,0,153,7,1,0,0,0,154,155,5,93,0,0,155,9,1,0,0,
		0,156,157,5,40,0,0,157,11,1,0,0,0,158,159,5,41,0,0,159,13,1,0,0,0,160,
		161,5,59,0,0,161,15,1,0,0,0,162,163,5,58,0,0,163,17,1,0,0,0,164,165,5,
		61,0,0,165,19,1,0,0,0,166,167,5,33,0,0,167,168,5,61,0,0,168,21,1,0,0,0,
		169,170,5,33,0,0,170,23,1,0,0,0,171,172,5,61,0,0,172,173,5,61,0,0,173,
		25,1,0,0,0,174,175,5,43,0,0,175,176,5,61,0,0,176,27,1,0,0,0,177,178,5,
		45,0,0,178,179,5,61,0,0,179,29,1,0,0,0,180,181,5,42,0,0,181,182,5,61,0,
		0,182,31,1,0,0,0,183,184,5,47,0,0,184,185,5,61,0,0,185,33,1,0,0,0,186,
		187,5,37,0,0,187,35,1,0,0,0,188,189,5,94,0,0,189,37,1,0,0,0,190,191,5,
		42,0,0,191,39,1,0,0,0,192,193,5,47,0,0,193,41,1,0,0,0,194,195,5,43,0,0,
		195,43,1,0,0,0,196,197,5,45,0,0,197,45,1,0,0,0,198,199,5,62,0,0,199,47,
		1,0,0,0,200,201,5,60,0,0,201,49,1,0,0,0,202,203,5,60,0,0,203,204,5,61,
		0,0,204,51,1,0,0,0,205,206,5,62,0,0,206,207,5,61,0,0,207,53,1,0,0,0,208,
		209,5,46,0,0,209,55,1,0,0,0,210,211,5,44,0,0,211,57,1,0,0,0,212,213,5,
		35,0,0,213,59,1,0,0,0,214,215,5,116,0,0,215,216,5,114,0,0,216,217,5,117,
		0,0,217,218,5,101,0,0,218,61,1,0,0,0,219,220,5,102,0,0,220,221,5,97,0,
		0,221,222,5,108,0,0,222,223,5,115,0,0,223,224,5,101,0,0,224,63,1,0,0,0,
		225,226,5,105,0,0,226,227,5,102,0,0,227,65,1,0,0,0,228,229,5,101,0,0,229,
		230,5,108,0,0,230,231,5,115,0,0,231,232,5,101,0,0,232,233,5,32,0,0,233,
		234,5,105,0,0,234,235,5,102,0,0,235,67,1,0,0,0,236,237,5,101,0,0,237,238,
		5,108,0,0,238,239,5,115,0,0,239,240,5,101,0,0,240,69,1,0,0,0,241,242,5,
		119,0,0,242,243,5,104,0,0,243,244,5,105,0,0,244,245,5,108,0,0,245,246,
		5,101,0,0,246,71,1,0,0,0,247,248,5,100,0,0,248,249,5,111,0,0,249,73,1,
		0,0,0,250,251,5,102,0,0,251,252,5,111,0,0,252,253,5,114,0,0,253,75,1,0,
		0,0,254,255,5,102,0,0,255,256,5,111,0,0,256,257,5,114,0,0,257,258,5,101,
		0,0,258,259,5,97,0,0,259,260,5,99,0,0,260,261,5,104,0,0,261,77,1,0,0,0,
		262,263,5,99,0,0,263,264,5,111,0,0,264,265,5,110,0,0,265,266,5,116,0,0,
		266,267,5,105,0,0,267,268,5,110,0,0,268,269,5,117,0,0,269,270,5,101,0,
		0,270,79,1,0,0,0,271,272,5,98,0,0,272,273,5,114,0,0,273,274,5,101,0,0,
		274,275,5,97,0,0,275,276,5,107,0,0,276,81,1,0,0,0,277,278,5,114,0,0,278,
		279,5,101,0,0,279,280,5,116,0,0,280,281,5,117,0,0,281,282,5,114,0,0,282,
		283,5,110,0,0,283,83,1,0,0,0,284,285,5,97,0,0,285,286,5,119,0,0,286,287,
		5,97,0,0,287,288,5,105,0,0,288,289,5,116,0,0,289,85,1,0,0,0,290,291,5,
		118,0,0,291,292,5,97,0,0,292,293,5,114,0,0,293,87,1,0,0,0,294,295,5,103,
		0,0,295,296,5,108,0,0,296,297,5,111,0,0,297,298,5,98,0,0,298,299,5,97,
		0,0,299,300,5,108,0,0,300,89,1,0,0,0,301,302,5,105,0,0,302,303,5,110,0,
		0,303,91,1,0,0,0,304,305,5,99,0,0,305,306,5,104,0,0,306,307,5,111,0,0,
		307,308,5,111,0,0,308,309,5,115,0,0,309,310,5,101,0,0,310,93,1,0,0,0,311,
		312,5,114,0,0,312,313,5,117,0,0,313,314,5,110,0,0,314,95,1,0,0,0,315,316,
		5,105,0,0,316,317,5,110,0,0,317,318,5,106,0,0,318,319,5,101,0,0,319,320,
		5,99,0,0,320,321,5,116,0,0,321,97,1,0,0,0,322,323,5,122,0,0,323,324,5,
		101,0,0,324,325,5,114,0,0,325,326,5,111,0,0,326,99,1,0,0,0,327,328,5,111,
		0,0,328,329,5,110,0,0,329,330,5,101,0,0,330,101,1,0,0,0,331,332,5,116,
		0,0,332,333,5,119,0,0,333,334,5,111,0,0,334,103,1,0,0,0,335,336,5,111,
		0,0,336,337,5,116,0,0,337,338,5,104,0,0,338,339,5,101,0,0,339,340,5,114,
		0,0,340,105,1,0,0,0,341,342,5,102,0,0,342,343,5,101,0,0,343,344,5,119,
		0,0,344,107,1,0,0,0,345,346,5,109,0,0,346,347,5,97,0,0,347,348,5,110,0,
		0,348,349,5,121,0,0,349,109,1,0,0,0,350,351,5,80,0,0,351,352,5,108,0,0,
		352,353,5,117,0,0,353,354,5,114,0,0,354,355,5,97,0,0,355,359,5,108,0,0,
		356,357,5,80,0,0,357,359,5,108,0,0,358,350,1,0,0,0,358,356,1,0,0,0,359,
		111,1,0,0,0,360,361,5,79,0,0,361,362,5,114,0,0,362,363,5,100,0,0,363,364,
		5,105,0,0,364,365,5,110,0,0,365,366,5,97,0,0,366,371,5,108,0,0,367,368,
		5,79,0,0,368,369,5,114,0,0,369,371,5,100,0,0,370,360,1,0,0,0,370,367,1,
		0,0,0,371,113,1,0,0,0,372,377,3,126,62,0,373,376,3,128,63,0,374,376,3,
		126,62,0,375,373,1,0,0,0,375,374,1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,
		0,377,378,1,0,0,0,378,115,1,0,0,0,379,377,1,0,0,0,380,382,3,44,21,0,381,
		380,1,0,0,0,381,382,1,0,0,0,382,384,1,0,0,0,383,385,3,128,63,0,384,383,
		1,0,0,0,385,386,1,0,0,0,386,384,1,0,0,0,386,387,1,0,0,0,387,394,1,0,0,
		0,388,390,3,54,26,0,389,391,3,128,63,0,390,389,1,0,0,0,391,392,1,0,0,0,
		392,390,1,0,0,0,392,393,1,0,0,0,393,395,1,0,0,0,394,388,1,0,0,0,394,395,
		1,0,0,0,395,117,1,0,0,0,396,397,3,58,28,0,397,398,3,116,57,0,398,399,3,
		116,57,0,399,400,3,116,57,0,400,401,3,116,57,0,401,402,3,116,57,0,402,
		403,3,116,57,0,403,404,3,116,57,0,404,406,3,116,57,0,405,407,3,120,59,
		0,406,405,1,0,0,0,406,407,1,0,0,0,407,119,1,0,0,0,408,409,3,16,7,0,409,
		410,3,134,66,0,410,121,1,0,0,0,411,412,5,34,0,0,412,123,1,0,0,0,413,414,
		5,36,0,0,414,415,5,34,0,0,415,416,1,0,0,0,416,417,6,61,2,0,417,125,1,0,
		0,0,418,419,7,0,0,0,419,127,1,0,0,0,420,421,7,1,0,0,421,129,1,0,0,0,422,
		423,7,2,0,0,423,424,1,0,0,0,424,425,6,64,3,0,425,131,1,0,0,0,426,427,5,
		47,0,0,427,428,5,47,0,0,428,432,1,0,0,0,429,431,8,3,0,0,430,429,1,0,0,
		0,431,434,1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,435,1,0,0,0,434,
		432,1,0,0,0,435,436,6,65,3,0,436,133,1,0,0,0,437,446,3,122,60,0,438,445,
		8,4,0,0,439,442,5,92,0,0,440,443,9,0,0,0,441,443,5,0,0,1,442,440,1,0,0,
		0,442,441,1,0,0,0,443,445,1,0,0,0,444,438,1,0,0,0,444,439,1,0,0,0,445,
		448,1,0,0,0,446,444,1,0,0,0,446,447,1,0,0,0,447,449,1,0,0,0,448,446,1,
		0,0,0,449,450,3,122,60,0,450,135,1,0,0,0,451,452,5,92,0,0,452,453,9,0,
		0,0,453,137,1,0,0,0,454,455,5,123,0,0,455,456,1,0,0,0,456,457,6,68,0,0,
		457,139,1,0,0,0,458,459,5,34,0,0,459,460,1,0,0,0,460,461,6,69,4,0,461,
		462,6,69,1,0,462,141,1,0,0,0,463,468,8,5,0,0,464,465,8,6,0,0,465,466,5,
		92,0,0,466,468,5,123,0,0,467,463,1,0,0,0,467,464,1,0,0,0,468,469,1,0,0,
		0,469,467,1,0,0,0,469,470,1,0,0,0,470,143,1,0,0,0,17,0,1,358,370,375,377,
		381,386,392,394,406,432,442,444,446,467,469,5,5,0,0,4,0,0,5,1,0,6,0,0,
		7,61,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
