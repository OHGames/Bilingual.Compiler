//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BilingualParser.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="BilingualParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public interface IBilingualParserVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.file"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFile([NotNull] BilingualParser.FileContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.container"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitContainer([NotNull] BilingualParser.ContainerContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.script"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitScript([NotNull] BilingualParser.ScriptContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.scriptAttributes"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitScriptAttributes([NotNull] BilingualParser.ScriptAttributesContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AddSub</c>
	/// labeled alternative in <see cref="BilingualParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddSub([NotNull] BilingualParser.AddSubContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PowExpr</c>
	/// labeled alternative in <see cref="BilingualParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPowExpr([NotNull] BilingualParser.PowExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BangExpression</c>
	/// labeled alternative in <see cref="BilingualParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBangExpression([NotNull] BilingualParser.BangExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AbsoluteValueExpression</c>
	/// labeled alternative in <see cref="BilingualParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAbsoluteValueExpression([NotNull] BilingualParser.AbsoluteValueExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NotEqualToExpr</c>
	/// labeled alternative in <see cref="BilingualParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotEqualToExpr([NotNull] BilingualParser.NotEqualToExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>GreaterLessThan</c>
	/// labeled alternative in <see cref="BilingualParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGreaterLessThan([NotNull] BilingualParser.GreaterLessThanContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ParenthesesExpression</c>
	/// labeled alternative in <see cref="BilingualParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenthesesExpression([NotNull] BilingualParser.ParenthesesExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NegateExpression</c>
	/// labeled alternative in <see cref="BilingualParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNegateExpression([NotNull] BilingualParser.NegateExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MemberExpression</c>
	/// labeled alternative in <see cref="BilingualParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMemberExpression([NotNull] BilingualParser.MemberExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MulDivMod</c>
	/// labeled alternative in <see cref="BilingualParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMulDivMod([NotNull] BilingualParser.MulDivModContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PlusMinusMulDivEqualExpression</c>
	/// labeled alternative in <see cref="BilingualParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPlusMinusMulDivEqualExpression([NotNull] BilingualParser.PlusMinusMulDivEqualExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>FunctionCallExpr</c>
	/// labeled alternative in <see cref="BilingualParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCallExpr([NotNull] BilingualParser.FunctionCallExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>GreaterThanLessThanEqual</c>
	/// labeled alternative in <see cref="BilingualParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGreaterThanLessThanEqual([NotNull] BilingualParser.GreaterThanLessThanEqualContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IncrementAndDecrementExpr</c>
	/// labeled alternative in <see cref="BilingualParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIncrementAndDecrementExpr([NotNull] BilingualParser.IncrementAndDecrementExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LiteralExpr</c>
	/// labeled alternative in <see cref="BilingualParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteralExpr([NotNull] BilingualParser.LiteralExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>EqualToExpr</c>
	/// labeled alternative in <see cref="BilingualParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEqualToExpr([NotNull] BilingualParser.EqualToExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ArrayAccessExpression</c>
	/// labeled alternative in <see cref="BilingualParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArrayAccessExpression([NotNull] BilingualParser.ArrayAccessExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ArrayLiteral</c>
	/// labeled alternative in <see cref="BilingualParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArrayLiteral([NotNull] BilingualParser.ArrayLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>TrueFalseLiteral</c>
	/// labeled alternative in <see cref="BilingualParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTrueFalseLiteral([NotNull] BilingualParser.TrueFalseLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NumberLiteral</c>
	/// labeled alternative in <see cref="BilingualParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumberLiteral([NotNull] BilingualParser.NumberLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StringLiteral</c>
	/// labeled alternative in <see cref="BilingualParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringLiteral([NotNull] BilingualParser.StringLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlock([NotNull] BilingualParser.BlockContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>DoWhileStmt</c>
	/// labeled alternative in <see cref="BilingualParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDoWhileStmt([NotNull] BilingualParser.DoWhileStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>DialogueStmt</c>
	/// labeled alternative in <see cref="BilingualParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDialogueStmt([NotNull] BilingualParser.DialogueStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MemberAssignmentStmt</c>
	/// labeled alternative in <see cref="BilingualParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMemberAssignmentStmt([NotNull] BilingualParser.MemberAssignmentStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>FunctionCallStmt</c>
	/// labeled alternative in <see cref="BilingualParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCallStmt([NotNull] BilingualParser.FunctionCallStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IncrementDecrementStmt</c>
	/// labeled alternative in <see cref="BilingualParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIncrementDecrementStmt([NotNull] BilingualParser.IncrementDecrementStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PlusMinusMulDivStmt</c>
	/// labeled alternative in <see cref="BilingualParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPlusMinusMulDivStmt([NotNull] BilingualParser.PlusMinusMulDivStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>RunStmt</c>
	/// labeled alternative in <see cref="BilingualParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRunStmt([NotNull] BilingualParser.RunStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>InjectStmt</c>
	/// labeled alternative in <see cref="BilingualParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInjectStmt([NotNull] BilingualParser.InjectStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ContinueStmt</c>
	/// labeled alternative in <see cref="BilingualParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitContinueStmt([NotNull] BilingualParser.ContinueStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BreakStmt</c>
	/// labeled alternative in <see cref="BilingualParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBreakStmt([NotNull] BilingualParser.BreakStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ReturnStmt</c>
	/// labeled alternative in <see cref="BilingualParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnStmt([NotNull] BilingualParser.ReturnStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IfStmt</c>
	/// labeled alternative in <see cref="BilingualParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfStmt([NotNull] BilingualParser.IfStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>VariableDeclarationStmt</c>
	/// labeled alternative in <see cref="BilingualParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableDeclarationStmt([NotNull] BilingualParser.VariableDeclarationStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>WhileStmt</c>
	/// labeled alternative in <see cref="BilingualParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileStmt([NotNull] BilingualParser.WhileStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ForStmt</c>
	/// labeled alternative in <see cref="BilingualParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForStmt([NotNull] BilingualParser.ForStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ForEachStmt</c>
	/// labeled alternative in <see cref="BilingualParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForEachStmt([NotNull] BilingualParser.ForEachStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ChooseStmt</c>
	/// labeled alternative in <see cref="BilingualParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitChooseStmt([NotNull] BilingualParser.ChooseStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableDeclaration([NotNull] BilingualParser.VariableDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.memberAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMemberAssignment([NotNull] BilingualParser.MemberAssignmentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMember([NotNull] BilingualParser.MemberContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfStatement([NotNull] BilingualParser.IfStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.ifElseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfElseStatement([NotNull] BilingualParser.IfElseStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.elseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElseStatement([NotNull] BilingualParser.ElseStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileStatement([NotNull] BilingualParser.WhileStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.doWhileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDoWhileStatement([NotNull] BilingualParser.DoWhileStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForStatement([NotNull] BilingualParser.ForStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.forEachStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForEachStatement([NotNull] BilingualParser.ForEachStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.dialogueStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDialogueStatement([NotNull] BilingualParser.DialogueStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.dialogueEmotion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDialogueEmotion([NotNull] BilingualParser.DialogueEmotionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.chooseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitChooseStatement([NotNull] BilingualParser.ChooseStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.chooseBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitChooseBlock([NotNull] BilingualParser.ChooseBlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCall([NotNull] BilingualParser.FunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParam([NotNull] BilingualParser.ParamContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.arrayIndexer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArrayIndexer([NotNull] BilingualParser.ArrayIndexerContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.arrayObject"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArrayObject([NotNull] BilingualParser.ArrayObjectContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.arrayAccess"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArrayAccess([NotNull] BilingualParser.ArrayAccessContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.runStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRunStatement([NotNull] BilingualParser.RunStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.injectStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInjectStatement([NotNull] BilingualParser.InjectStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.unaryIncrementLeft"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryIncrementLeft([NotNull] BilingualParser.UnaryIncrementLeftContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.unaryIncrementRight"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryIncrementRight([NotNull] BilingualParser.UnaryIncrementRightContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.unaryDecrementLeft"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryDecrementLeft([NotNull] BilingualParser.UnaryDecrementLeftContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.unaryDecrementRight"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryDecrementRight([NotNull] BilingualParser.UnaryDecrementRightContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MulDivEqualTo</c>
	/// labeled alternative in <see cref="BilingualParser.plusMinusMulDivEqual"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMulDivEqualTo([NotNull] BilingualParser.MulDivEqualToContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PlusMinusEqualTo</c>
	/// labeled alternative in <see cref="BilingualParser.plusMinusMulDivEqual"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPlusMinusEqualTo([NotNull] BilingualParser.PlusMinusEqualToContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.incrementsAndDecrements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIncrementsAndDecrements([NotNull] BilingualParser.IncrementsAndDecrementsContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StringContentGraphemes</c>
	/// labeled alternative in <see cref="BilingualParser.stringContents"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringContentGraphemes([NotNull] BilingualParser.StringContentGraphemesContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StringContentExpr</c>
	/// labeled alternative in <see cref="BilingualParser.stringContents"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringContentExpr([NotNull] BilingualParser.StringContentExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StringContentPluralized</c>
	/// labeled alternative in <see cref="BilingualParser.stringContents"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringContentPluralized([NotNull] BilingualParser.StringContentPluralizedContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.lotsOfGraphemes"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLotsOfGraphemes([NotNull] BilingualParser.LotsOfGraphemesContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.interpolationString"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInterpolationString([NotNull] BilingualParser.InterpolationStringContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.pluralizedQuantity"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPluralizedQuantity([NotNull] BilingualParser.PluralizedQuantityContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BilingualParser.pluralCountParam"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPluralCountParam([NotNull] BilingualParser.PluralCountParamContext context);
}
